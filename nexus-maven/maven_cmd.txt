maven3学习
命令
mvn help:system
编译源代码： mvn compile 生成.class文件(在\target\classes下编译生成class文件)
清除：mvn clean 清除target文件夹
打包：mvn package 将class打包生成jar或war
安装到本地maven库：mvn install


###############################################
maven插件
<build>
    <!-- 生成可执行jar 的maven插件-->
   <plugins>

      <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-shade-plugin</artifactId>
       <version>1.2.1</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer
                  implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>com.ibaobao.MTest</mainClass><!-- Main方法所在类 -->
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>
 </plugins>
  </build>


#####################################################
setting.mxl 
localRepository：表示本地库的保存位置，也就是maven主要的jar保存位置，默认在${user.dir}/.m2/repository，如果需要另外设置，就换成其他的路径。

 

       interactiveMode：如果Maven需要和用户交互以获得输入，则设置成true，反之则应为false。默认

为true。

       offline：如果不想每次编译，都去查找远程中心库，那就设置为true。当然前提是你已经下载了必须的依赖包。

 

       usePluginRegistry：如果需要让Maven使用文件plugin-registry.xml来管理插件版本，则设为true。默认为false。

      

       proxies: 多个proxy profile配置。当你在其它平台工作时，能方面切换。

 

       servers: 一些需要验证的服务器配置，每个服务器都可以有不同配置。

 

       mirros: 仓库的下载镜像。

 

       profiles: 项目构建的配置信息，这里会有单独说明。

 

       activeProfiles：激活的profile列表，按顺序生效。

 

       pluginGroups: 如果插件groupId未指明，按该列表下的id去查找。














maven命令行

编译源代码： mvn compile 
编译测试代码：mvn test-compile 
运行测试：mvn test  
产生site：mvn site   
打包：mvn package 
在本地Repository中安装jar：mvn install 
清除产生的项目：mvn clean